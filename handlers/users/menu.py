import sqlite3
from aiogram import types
from aiogram.dispatcher.filters import Command
from loader import dp
from keyboards.default import menu, catalog, balance_menu_keyboard
from keyboards.inline import support_keyboard
from aiogram.types import ParseMode, CallbackQuery
from utils import check_balance
from handlers.users import catalog_handler, pay_item, up_balance


@dp.message_handler(Command("start"))
async def main_menu(message: types.Message):
    check_user_id = []
    user_id = str(message.from_user.id)
    db = sqlite3.connect("user_data.db")
    cursor = db.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS {}(name varchar(255), balance INTEGER)".format('userss'))
    db.commit()
    sqlite_select_query = f"""SELECT * from userss WHERE name={user_id}"""
    cursor.execute(sqlite_select_query)
    x = cursor.fetchall()

    for i in x:
        print(i)
        check_user_id.append(i[0])

    print(check_user_id)

    if user_id in check_user_id:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}ü§ö!", reply_markup=menu)
        print("–î–∞")
    else:
        cursor.execute("INSERT INTO userss VALUES (?,?)", (user_id, 0,))
        db.commit()
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}ü§ö!", reply_markup=menu)
        print("–ù–µ—Ç")


@dp.message_handler(Command("catalog"))
async def catalog_product(message: types.Message):
    await message.answer("üí°–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=catalog)


@dp.message_handler(Command("info"))
async def user_info(message: types.Message):
    user_id = str(message.from_user.id)
    user_balance = check_balance(user_id=user_id)
    await message.answer(f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
                         f"\n‚Ñπ<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>"
                         f"\nüìú–õ–æ–≥–∏–Ω: @{message.from_user.username}"
                         f"\nüîëID: <b>{message.from_user.id}</b>"
                         f"\n\n\nüí∞–ë–∞–ª–∞–Ω—Å: <b>{user_balance}</b> —Ä—É–±"
                         f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
                         parse_mode=ParseMode.HTML)


@dp.message_handler(Command("balance"))
async def balance(message: types.Message):
    user_id = str(message.from_user.id)
    user_balance = check_balance(user_id=user_id)
    await message.answer(f"üí∞–ë–∞–ª–∞–Ω—Å: <b>{user_balance}</b> —Ä—É–±.",
                         parse_mode=ParseMode.HTML,
                         reply_markup=balance_menu_keyboard)


@dp.message_handler(Command("support"))
@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞üåê")
async def support(message: types.Message):
    await message.answer("üßë‚Äçüîß–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?"
                         "\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!", reply_markup=support_keyboard)

@dp.message_handler(text="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤üõí")
async def catalog_product(message: types.Message):
    await message.answer("üí°–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=catalog)


@dp.message_handler(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§")
async def user_info(message: types.Message):
    user_id = str(message.from_user.id)
    user_balance = check_balance(user_id=user_id)
    await message.answer(f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
                         f"\n‚Ñπ<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>"
                         f"\nüìú–õ–æ–≥–∏–Ω: @{message.from_user.username}"
                         f"\nüîëID: <b>{message.from_user.id}</b>"
                         f"\n\n\nüí∞–ë–∞–ª–∞–Ω—Å: <b>{user_balance}</b> —Ä—É–±"
                         f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
                         parse_mode=ParseMode.HTML)


@dp.message_handler(text="–ë–∞–ª–∞–Ω—Åüí∞")
async def balance(message: types.Message):
    user_id = str(message.from_user.id)
    user_balance = check_balance(user_id=user_id)
    await message.answer(f"üí∞–ë–∞–ª–∞–Ω—Å: <b>{user_balance}</b> —Ä—É–±.",
                         parse_mode=ParseMode.HTML,
                         reply_markup=balance_menu_keyboard)


@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞üåê")
async def support(message: types.Message):
    await message.answer("üßë‚Äçüîß–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?"
                         "\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!", reply_markup=support_keyboard)


@dp.message_handler(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚¨Ö")
async def undo(message: types.Message):
    await message.answer(f"{message.text}", reply_markup=menu)


@dp.callback_query_handler(text="rules")
async def get_rules(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer("1. –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã 15 –º–∏–Ω—É—Ç. –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è."
                              "\n1.1. –ü—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏."
                              "\n1.2. –ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç—Ä–µ—Ç–∏–º –ª–∏—Ü–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç."
                              "\n2. –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞ –±–µ–∑ "
                              "–æ–±—Ä–µ–∑–∫–∏ –∏ –º–æ–Ω—Ç–∞–∂–∞."
                              "\n2.1. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è "
                              "–≤—Ö–æ–¥–∞ –∏ –¥–ª–∏—Ç—å—Å—è –¥–æ —Ç—Ä–∞—Ç—ã –±–∞–ª–∞–Ω—Å–∞."
                              "\n2.2. –ù–∞ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∑–∞—Ö–æ–¥–∏—Ç–µ")





