from loader import dp
from aiogram import types
from data.item import items
from data.config import wallet_qiwi
from keyboards.inline.buy_menu import key, key2, key3, key4, key5, key6, key7, key8, key9, key10, key_k
from aiogram.types import CallbackQuery, ParseMode
from aiogram.dispatcher import FSMContext
from utils import Payment, NotEnoughMoney, NoPaymentFound, check_balance
from keyboards import menu,payment_method_keyboard, catalog
import sqlite3

item_id = 0
amount_from_balance = 0



@dp.message_handler(text_contains="—Ä—É–±")
async def get_item(message: types.Message):
    global item_id, amount_from_balance
    caption = """
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</b> {title}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
<b>–¶–µ–Ω–∞:</b> {price:.2f} RUB
"""

    if message.text == "–ë–∏–≥ –ú–∞–∫ | 4 —Ä—É–±üçî":
        item_id = 1
        amount_from_balance = 4


    elif message.text == "–ö–∞—Ä—Ç–æ—à–∫–∞ –º–∞–ª–µ–Ω—å–∫–∞—è | 2 —Ä—É–±üçü":
        item_id = 2
        amount_from_balance = 2

    elif message.text == "–ü–∞—Ç–∏ –±–æ–∫—Å | 3 —Ä—É–±üçü":
        item_id = 3
        amount_from_balance = 3

    elif message.text == "–ß–∏–∑–±—É—Ä–≥–µ—Ä | 2 —Ä—É–±üçî":
        item_id = 4
        amount_from_balance = 2

    elif message.text == "Nord VPN 365 –¥–Ω–µ–π | 3 —Ä—É–±üñ•":
        item_id = 5
        amount_from_balance = 3

    elif message.text == "ZenMate 3 –º–µ—Å—è—Ü–∞ | 4 —Ä—É–±üñ•":
        item_id = 6
        amount_from_balance = 4

    elif message.text == "GTA V | 3 —Ä—É–±üíø":
        item_id = 7
        amount_from_balance = 3

    elif message.text == "Far Cry 6 | 4 —Ä—É–±üíø":
        item_id = 8
        amount_from_balance = 4

    elif message.text == "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 250 —Ä—É–±–ª–µ–π | 2 —Ä—É–±ü•™":
        item_id = 9
        amount_from_balance = 2

    elif message.text == "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 500 —Ä—É–±–ª–µ–π | 4 —Ä—É–±ü•™":
        item_id = 10
        amount_from_balance = 4

    for item in items:
        if item.id == item_id:
            await message.answer_photo(
                photo=item.photo_link,
                caption=caption.format(
                    title=item.title,
                    description=item.description,
                    price=item.price),
                parse_mode=ParseMode.HTML)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ",
                         reply_markup=payment_method_keyboard)


@dp.message_handler(text="–°–Ω—è—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞üí∞")
async def buy_balance(message: types.Message):
    user_id = message.from_user.id
    balance = check_balance(user_id=user_id)
    print(balance)
    if balance >= amount_from_balance:
        db = sqlite3.connect("user_data.db")
        cursor = db.cursor()
        sqlite_select_query = f"""SELECT balance from userss WHERE name={user_id}"""
        cursor.execute(sqlite_select_query)
        cursor.execute(f"""UPDATE userss SET balance=balance-{amount_from_balance} WHERE name={user_id}""")
        db.commit()
        cursor.execute(sqlite_select_query)
        x = cursor.fetchall()
        print(x)
        await message.answer("–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ."
                             "\n–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:",
                             reply_markup=catalog)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")


@dp.message_handler(text="–û–ø–ª–∞—Ç–∏—Ç—å QIWIü•ù")
async def buy(message: types.Message, state: FSMContext):
    amount = 0
    for item in items:
        if item.id == item_id:
            amount = item.price

    payment = Payment(amount=amount)
    payment.create()

    await state.set_state("qiwi")
    await state.update_data(payment=payment)

    await message.answer("–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞‚ùó",
                         reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f"<b>üì≤–ù–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {wallet_qiwi}"
                         f"\n<b>üóù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{payment.id}</code>"
                         f"\n<b>üí∏–û–ø–ª–∞—Ç–∏—Ç—å:</b> {amount:.2f} RUB",
                         parse_mode=ParseMode.HTML,
                         reply_markup=key_k)



@dp.callback_query_handler(text="cancel", state="qiwi")
async def cancel_payment(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ‚ùå")
    await call.message.answer("üóÇ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu)
    await state.finish()


@dp.message_handler(text="–û—Ç–º–µ–Ω–∏—Ç—å‚ùå")
async def cancel_payment(message: types.Message):
    await message.answer("üí°–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=catalog)


@dp.callback_query_handler(text="paid", state="qiwi")
async def approve_payment(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment: Payment = data.get("payment")
    try:
        payment.check_payment()
    except NoPaymentFound:
        await call.message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞‚ùå")
        return
    except NotEnoughMoney:
        await call.message.answer("–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π")
        return
    else:
        await call.message.answer(f"–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ"
                                  f"\n–í–∞—à —Ç–æ–≤–∞—Ä:"
                                  f"\n–õ–æ–≥–∏–Ω - "
                                  f"\n–ü–∞—Ä–æ–ª—å - ")
    await call.message.delete_reply_markup()
    await state.finish()

